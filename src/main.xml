<?xml version="1.0" encoding="utf-8"?>
<!--
  Copyright 2011-2014 Marvell Semiconductor, Inc.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<program xmlns="http://www.kinoma.com/kpr/1">
    <require path="mobile/dialog" id="DIALOG"/>
    <require path="mobile/model" id="MODEL"/>
    <require path="themes/sample/theme" id="THEME"/>
    <require path="mobile/keyboard" id="KEYBOARD"/>
    <variable id="humi_exp" value="0"/>
    <variable id="temp_min" value="0"/>
    <variable id="temp_max" value="0"/>
   	<variable id="lumi_exp" value="0"/>
    <variable id="led_sts" value="0"/>
    <variable id="led_manual" value="0"/>
    <variable id="water_sts" value="0"/>
    <variable id="water_manual" value="0"/>
    <!-- ASSETS -->

    <skin id="backgroundSkin" color="#000000"/>
    <skin id="button_temp_Skin" color="#4169E1"/>
    <skin id="button_wet_Skin" color="#6A5ACD"/>
    <skin id="button_light_Skin" color="#FF4040"/>
    <skin id="button_water_Skin" color="#00CD00"/>
    <skin id="button_led_Skin" color="#FF8C00"/>
    <skin id="hiliteSkin" color="#333333"/>
    <skin id="dummuSkin" color="red"/>
    <style id="textStyle" font="16px" color="white" align="center,middle"/>
    <style id="headerStyle" font="bold 16px" color="#444" align="center,bottom"/>
    <style id="buttonStyle" font="bold 16px" color="white" align="center,middle"/>
    <style id="labelStyle" font="bold 16px" color="white" align="center,bottom"/>
    <style id="biglabelStyle" font="bold 24px" color="white" align="center,middle"/>
    <style id="numStyle" font="bold 26px" color="white" align="center,top"/>
    
    <handler path="/getSAE">
    	<behavior>
    		<method id="onInvoke" params="handler, message"><![CDATA[
                //Receives result and passes to main container.
                var posturl = "https://api.weibo.com/2/statuses/update.json";
				var message = new Message(posturl);
				message.method = "POST";
				message.requestText = encodeURI("status=发微博&access_token=2.00JJK4KBTeaqdCa032603feeRqzg8D");
				message.setRequestHeader("Content-Length", message.requestText.length);
				message.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
				handler.invoke(message, Message.TEXT);           
			]]></method>
            <method id="onComplete" params="handler, message, text"><![CDATA[
                //Receives result and passes to main container.
                trace(text);
            ]]></method>
        </behavior>
    </handler>
    
    <handler path="/gotWetResult">
    	<behavior>
    		<method id="onInvoke" params="handler, message"><![CDATA[
                //Receives result and passes to main container.
                var result = message.requestObject;  
        		application.distribute( "wetChanged", result );            		
            ]]></method>
        </behavior>
    </handler>
    <handler path="/gotTempResult">
    	<behavior>
    		<method id="onInvoke" params="handler, message"><![CDATA[
                //Receives result and passes to main container.
                var result = message.requestObject;  
        		application.distribute( "tempChanged", result ); 		
            ]]></method>
        </behavior>
    </handler>
    <handler path="/gotLxResult">
    	<behavior>
    		<method id="onInvoke" params="handler, message"><![CDATA[
                //Receives result and passes to main container.
                var result = message.requestObject;  
        		application.distribute( "lxChanged", result ); 	
                if(result<lumi_exp&&!led_sts&&!led_manual)
                {
                    application.distribute( "LedOn"); 
                } else if (result>lumi_exp+100&&!led_manual){
                    application.distribute( "LedOff"); 
                }
            ]]></method>
        </behavior>
    </handler>
    <!-- MODEL -->

    <behavior id="ButtonBehavior_temp">
        <method id="onCreate" params="label">
            label.coordinates = {top:1, bottom:0, left:1, right:1};
            label.skin = button_temp_Skin;
            label.style = labelStyle;
            label.active = true;
        </method>
        <method id="onTouchBegan" params="label">
        </method>
        <method id="onTouchEnded" params="label">
            label.skin = button_temp_Skin;
            this.onTap(label);
        </method>
        <method id="onTap" params="label">
             trace(label.string);
        </method>
    </behavior>
        <behavior id="ButtonBehavior_temp_num">
        <method id="onCreate" params="label">
            label.coordinates = {top:0, bottom:1, left:1, right:1};
            label.skin = button_temp_Skin;
            label.style = numStyle;
            label.active = true;
        </method>
        <method id="onTouchBegan" params="label">
        </method>
        <method id="onTouchEnded" params="label">
            label.skin = button_temp_Skin;
            this.onTap(label);
        </method>
        <method id="onTap" params="label">
             trace(label.string);
        </method>
        <method id="tempChanged" params="content,result"><![CDATA[
                    content.string = result.toFixed(2) + " °C";
     ]]></method>
    </behavior>
    
    <behavior id="ButtonBehavior_wet">
        <method id="onCreate" params="label">
            label.coordinates = {top:1, bottom:0, left:1, right:1};
            label.skin = button_wet_Skin;
            label.style = labelStyle;
            label.active = true;
        </method>
        <method id="onTouchBegan" params="label">
        </method>
        <method id="onTouchEnded" params="label">
            label.skin = button_wet_Skin;
            this.onTap(label);
        </method>
        <method id="onTap" params="label">
             trace(label.string);
        </method>
    </behavior>
    <behavior id="ButtonBehavior_wet_num">
        <method id="onCreate" params="label">
            label.coordinates = {top:0, bottom:1, left:1, right:1};
            label.skin = button_wet_Skin;
            label.style = numStyle;
            label.active = true;
        </method>
        <method id="onTouchBegan" params="label">
        </method>
        <method id="onTouchEnded" params="label">
            label.skin = button_wet_Skin;
            this.onTap(label);
        </method>
        <method id="onTap" params="label">
             trace(label.string);
        </method>
        <method id="wetChanged" params="content,result"><![CDATA[
            		//Converts voltage result to temperature. 
                    var temp = result;
                    content.string = temp.toFixed(2) + " %";
     ]]></method>
    </behavior>
    
    <behavior id="ButtonBehavior_light">
        <method id="onCreate" params="label">
            label.coordinates = {top:1, bottom:0, left:1, right:1};
            label.skin = button_light_Skin;
            label.style = labelStyle;
            label.active = true;
        </method>
        <method id="onTouchBegan" params="label">
        </method>
        <method id="onTouchEnded" params="label">
            label.skin = button_light_Skin;
            this.onTap(label);
        </method>
        <method id="onTap" params="label">
             trace(label.string);
        </method>
    </behavior>
    
    <behavior id="ButtonBehavior_light_num">
        <method id="onCreate" params="label">
            label.coordinates = {top:0, bottom:1, left:1, right:1};
            label.skin = button_light_Skin;
            label.style = numStyle;
            label.active = true;
        </method>
        <method id="onTouchBegan" params="label">
        </method>
        <method id="onTouchEnded" params="label">
            label.skin = button_light_Skin;
            this.onTap(label);
        </method>
        <method id="onTap" params="label">
             trace(label.string);
        </method>
        <method id="lxChanged" params="content,result"><![CDATA[
                    content.string = result.toFixed(2) + " lx";
     ]]></method>
    </behavior>
    
    <behavior id="ButtonBehavior_water">
        <method id="onCreate" params="label">
            label.coordinates = {top:1, bottom:1, left:1, right:1};
            label.skin = button_water_Skin;
            label.style = biglabelStyle;
            label.active = true;
        </method>
        <method id="onTouchBegan" params="label">
            label.skin = hiliteSkin;
        </method>
        <method id="onTouchEnded" params="label">
            label.skin = button_water_Skin;
            led_sts = 1 - led_sts;
            if(led_sts == 1)
                this.LedOn(label);
            else
                this.LedOff(label);
        </method>
        <method id="LedOn" params="label">
            label.string ="LED:ON";
        </method>
        <method id="LedOff" params="label">
            label.string ="LED:OFF";
        </method>
    </behavior>
    
    <behavior id="ButtonBehavior_led">
        <method id="onCreate" params="label">
            label.coordinates = {top:1, bottom:1, left:1, right:1};
            label.skin = button_led_Skin;
            label.style = biglabelStyle;
            label.active = true;
        </method>
        <method id="onTouchBegan" params="label">
            label.skin = hiliteSkin;
        </method>
        <method id="onTouchEnded" params="label">
            label.skin = button_led_Skin;
            led_manual = 1 - led_manual;
            if(led_sts == 1)
                this.LedOn(label);
            else
                this.LedOff(label);
        </method>
        <method id="LedOn" params="label">
            label.string ="LED:ON";
            led_sts = 1;
        </method>
        <method id="LedOff" params="label">
            label.string ="LED:OFF";
            led_sts = 1;
        </method>
    </behavior>

<container id="MainScreen" top="0" left="0" bottom="0" right="0" skin="backgroundSkin">
    <column width="320">
        <line left="0" right="0" height="140">
            <column top="0" left="0" bottom="0" right="0">
                <label string="'Temperature'">
                    <behavior like="ButtonBehavior_temp">
                        <method id="onTap" params="label">label.invoke(new Message("/temp_setting"));</method>
                    </behavior>
                </label>
                <label string="'50 °C'">
                    <behavior like="ButtonBehavior_temp_num">
                        <method id="onTap" params="label">label.invoke(new Message("/temp_setting"));</method>
                    </behavior>
                </label>
            </column>
            <column top="0" left="0" bottom="0" right="0">
                <label string="'Soil Humidity'">
                    <behavior like="ButtonBehavior_wet">
                        <method id="onTap" params="label">label.invoke(new Message("/water_setting"));</method>
                    </behavior>
                </label>
                <label string="'50 %'">
                    <behavior like="ButtonBehavior_wet_num">
                        <method id="onTap" params="label">label.invoke(new Message("/water_setting"));</method>
                    </behavior>
                </label>
            </column>
            <column top="0" left="0" bottom="0" right="0">
                <label string="'Luminance'">
                    <behavior like="ButtonBehavior_light">
                        <method id="onTap" params="label">label.invoke(new Message("/light_setting"));</method>
                    </behavior>
                </label>
                <label string="'70 lx'">
                    <behavior like="ButtonBehavior_light_num">
                        <method id="onTap" params="label">label.invoke(new Message("/light_setting"));</method>
                    </behavior>
                </label>
            </column>
        </line>
        <line left="0" right="0" height="100">
            <label string="'watering'">
                <behavior like="ButtonBehavior_water">
                    <method id="onTap" params="label">trace("water");</method>
                </behavior>
            </label>
            <label string="'LED'">
                <behavior like="ButtonBehavior_led">
                    <method id="onTap" params="label">trace("led");</method>
                </behavior>
            </label>
        </line>
    </column>
</container>

    <script><![CDATA[
    application.invoke( new MessageWithObject( "pins:configure", {
        	analogSensor: {
                require: "flower",
                pins: {
                    wetSensor: { pin: 58 },
                    i2cTemp: { sda: 55, clock: 56 },  
                    i2cLumin: { sda: 60, clock: 61 },  
                    watering:  { pin: 66 },
                    led: { pin: 64 }            
                }
            }
        } ) );
    application.invoke( new MessageWithObject( "pins:/analogSensor/wetread?" + 
            serializeQuery( {       
				repeat: "on",
				interval: 1000,
				callback: "/gotWetResult"
        } ) ) );	
    application.invoke( new MessageWithObject( "pins:/analogSensor/tempread?" + 
            serializeQuery( {       
				repeat: "on",
				interval: 1000,
				callback: "/gotTempResult"
        } ) ) );
    application.invoke( new MessageWithObject( "pins:/analogSensor/lightread?" + 
            serializeQuery( {       
				repeat: "on",
				interval: 1000,
				callback: "/gotLxResult"
        } ) ) );
    application.invoke(new Message("/getSAE"));
    application.behavior = new MODEL.ApplicationBehavior( application );

    var data = {
        title: 'dialog maniacs',
    };
    application.add( new MainScreen(data) );
    
    ]]></script>
    <handler path="/temp_setting">
        <behavior like="MODEL.DialogBehavior">
            <method id="onDescribe" params="query">
                return {
                    Dialog: DIALOG.Box,
                    title: "Temperature Setting",
                    items: [
                        {
                            Item: DIALOG.Slider,
                            id: "temp_min",
                            label: "Set Min Temperature",
                            min: 0,
                            max: 100,
                            value: temp_min,
                            toString: function(val) { return Math.floor(val); }, 
                        },
                        {
                            Item: DIALOG.Slider,
                            id: "temp_max",
                            label: "Set Max Temperature",
                            min: 0,
                            max: 100,
                            value: temp_max,
                            toString: function(val) { return Math.floor(val); }, 
                        }
                    ],
                    ok: "Comfirm",
                    cancel: "Close",
                    action: "/temp_set",
                };
            </method>
        </behavior>
    </handler>
    <handler path="/water_setting">
        <behavior like="MODEL.DialogBehavior">
            <method id="onDescribe" params="query">
                return {
                    Dialog: DIALOG.Box,
                    title: "Setting",
                    items: [
                        {
                            Item: DIALOG.Slider,
                            id: "humi_exp",
                            label: "Set Soil Humidity",
                            min: 0,
                            max: 100,
                            value: humi_exp,
                            toString: function(val) { return Math.floor(val); }, 
                        }
                    ],
                    ok: "Comfirm",
                    cancel: "Close",
                    action: "/water_set",
                };
            </method>
        </behavior>
    </handler>

    <handler path="/light_setting">
        <behavior like="MODEL.DialogBehavior">
             <method id="onDescribe" params="query">
                return {
                    Dialog: DIALOG.Box,
                    title: "Setting",
                    items: [
                        {
                            Item: DIALOG.Slider,
                            id: "lumi_exp",
                            label: "Set Luminance",
                            min: 0,
                            max: 100,
                            value: lumi_exp,
                            toString: function(val) { return Math.floor(val); }, 
                        }
                    ],
                    ok: "Comfirm",
                    cancel: "Close",
                    action: "/light_set",
                };
            </method>
        </behavior>
    </handler> 


    <handler path="/temp_set">
        <behavior like="MODEL.CommandBehavior">
            <method id="onQuery" params="handler, query">
                for (var key in query) {
                    if(key == "temp_min")
                        temp_min = query[key];
                    else 
                        temp_max = query[key];
                    trace(key + ": " + query[key] + "\n");
                }
            </method>
        </behavior>
    </handler>
    <handler path="/water_set">
        <behavior like="MODEL.CommandBehavior">
            <method id="onQuery" params="handler, query">
                for (var key in query) {
                        humi_exp = query[key];
                    trace(key + ": " + query[key] + "\n");
                }
            </method>
        </behavior>
    </handler>
    <handler path="/light_set">
        <behavior like="MODEL.CommandBehavior">
            <method id="onQuery" params="handler, query">
                for (var key in query) {
                        lumi_exp = query[key];
                    trace(key + ": " + query[key] + "\n");
                }
            </method>
        </behavior>
    </handler>
</program>
