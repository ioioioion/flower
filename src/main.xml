<?xml version="1.0" encoding="utf-8"?>
<!--
  Copyright 2011-2014 Marvell Semiconductor, Inc.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<program xmlns="http://www.kinoma.com/kpr/1">
    <require path="mobile/dialog" id="DIALOG"/>
    <require path="mobile/model" id="MODEL"/>
    <require path="themes/sample/theme" id="THEME"/>
    <require path="mobile/keyboard" id="KEYBOARD"/>
    <variable id="humi_exp" value="0"/>
    <variable id="temp_min" value="10"/>
    <variable id="temp_max" value="30"/>
   	<variable id="lumi_exp" value="0"/>
    <variable id="led_sts" value="0"/>
    <variable id="lumi_auto" value="0"/>
    <variable id="humi_auto" value="0"/>
    <variable id="water_sts" value="0"/>
    <variable id="water_manual" value="0"/>
    <variable id="temp_Info" value="0"/>
    <variable id="lumi_Info" value="0"/>
    <variable id="humi_Info" value="0"/>
    <variable id="last_humi_Info" value="0"/>
    <variable id="access_token" value="0"/>
    <variable id="channelurl" value="0"/>
    <variable id="weibo_status" value="0"/>
    <variable id="open_message" value="0"/>
    <variable id="temp_status" value="0"/>
    <variable id="channel_init" value="0"/>
    
    <!-- ASSETS -->
    <texture id="icon_on" small="./assets/bdreader_seekbar_more_brightness_normal.png"/>
    <skin id="backgroundSkin" color="#000000"/>
    <skin id="graySkin" color="#888888"/>
    <skin id="button_temp_Skin" color="#2B5797"/>
    <skin id="button_humi_Skin" color="#1E7145"/>
    <skin id="button_lumi_Skin" color="#FFC40D"/>

    <skin id="button_maxtemp_Skin" color="#603CBA"/>
    <skin id="button_humi_exp_Skin" color="#252525"/>
    <skin id="button_lumi_auto_Skin" color="#00ABA9"/>
    <skin id="button_water_Skin" color="#56C5ff"/>
    <skin id="button_water_auto_Skin" color="#DA532C"/>
    <skin id="button_lumi_exp_Skin" color="#EE1111"/>

    <skin id="button_light_Skin" color="#00c13f"/>
    
    <skin id="hiliteSkin" color="#333333"/>
    <skin id="dummuSkin" color="red"/>
    <style id="inactiveStyle" font="bold 24px" color="#CCCCCC" align="center,middle"/>
    
    <style id="textStyle" font="16px" color="white" align="center,middle"/>
    <style id="headerStyle" font="bold 16px" color="#444" align="center,bottom"/>
    <style id="buttonStyle" font="bold 16px" color="white" align="center,middle"/>
    <style id="labelStyle" font="bold 16px" color="white" align="center,bottom"/>
    <style id="RedStyle" font="bold 16px" color="red" align="center,bottom"/>
    <style id="b_smalllabelStyle" font="bold 20px" color="white" align="center,bottom"/>
    <style id="t_smalllabelStyle" font="bold 20px" color="white" align="center,top"/>
    <style id="biglabelStyle" font="bold 24px" color="white" align="center,middle"/>
    <style id="numStyle" font="bold 26px" color="white" align="center,top"/>
    <style id="RednumStyle" font="bold 26px" color="red" align="center,top"/>
    
    <handler path="/weibo">
    	<behavior>
    		<method id="onInvoke" params="handler, message"><![CDATA[
                //Receives result and passes to main container.
                var posturl = "https://api.weibo.com/2/statuses/update.json";
				var message = new Message(posturl);
				message.method = "POST";
				message.requestText = encodeURI("status="+weibo_status+"&access_token="+access_token);
				message.setRequestHeader("Content-Length", message.requestText.length);
				message.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
				handler.invoke(message, Message.TEXT);           
			]]></method>
            <method id="onComplete" params="handler, message, text"><![CDATA[
                //Receives result and passes to main container.
                trace(text);
            ]]></method>
        </behavior>
    </handler>
        <handler path="/getUrl">
    	<behavior>
    		<method id="onInvoke" params="handler, message"><![CDATA[
                //Receives result and passes to main container.
                var posturl = "http://kinomaflower.vipsinaapp.com/Kinoma";
				var message = new Message(posturl);
				handler.invoke(message, Message.TEXT);           
			]]></method>
            <method id="onComplete" params="handler, message, text"><![CDATA[
                //Receives result and passes to main container.
               	channelurl=text;
                application.distribute( "initChannel" );      	
            ]]></method>
        </behavior>
    </handler>
        <handler path="/getToken">
    	<behavior>
    		<method id="onInvoke" params="handler, message"><![CDATA[
                //Receives result and passes to main container.
                var posturl = "http://xijincheng.vipsinaapp.com/get_token";
				var message = new Message(posturl);
				handler.invoke(message, Message.TEXT);           
			]]></method>
            <method id="onComplete" params="handler, message, text"><![CDATA[
                //Receives result and passes to main container.
               	access_token=text;
            ]]></method>
        </behavior>
    </handler>

    <handler path="/get_humi_Result">
    	<behavior>
    		<method id="onInvoke" params="handler, message"><![CDATA[
                //Receives result and passes to main container.
                var result = message.requestObject;  
                humi_Info = result.toFixed(2);
        		application.distribute( "humi_Changed", result );    
        		if(eval(result)<eval(humi_exp)&&water_sts==0&&humi_auto==1)
                {
                    last_humi_Info = humi_Info;
                    application.distribute( "Auto_WaterOn"); 
                }     		
            ]]></method>
        </behavior>
    </handler>
    <handler path="/get_temp_Result">
    	<behavior>
    		<method id="onInvoke" params="handler, message"><![CDATA[
                //Receives result and passes to main container.
                var result = message.requestObject; 
                temp_Info = result.toFixed(2); 
                if(eval(temp_Info)<eval(temp_min)&&temp_status!=1){
                    temp_status=1;
                    application.distribute( "temp_abnormal" ); 
                    weibo_status="温度过低警报，现在的温度是"+temp_Info+"摄氏度，低于设置的最低温度"+temp_min+"摄氏度。 @ioioioion @shen_wu";
                    if(open_message==1){                
                    	application.invoke(new Message("/weibo"));
                   	}
                }
                else if(eval(temp_Info)>eval(temp_max)&&temp_status!=2){
                    temp_status=2;
                    application.distribute( "temp_abnormal" ); 
                    weibo_status="温度过高警报，现在的温度是"+temp_Info+"摄氏度，高于设置的最高温度"+temp_max+"摄氏度。 @ioioioion @shen_wu";
                    if(open_message==1){                
                    	application.invoke(new Message("/weibo"));
                   	}
                }
                else if(temp_status!=0&&eval(temp_Info)<(eval(temp_max)-1)&&eval(temp_Info)>(eval(temp_min)+1)){
                    temp_status=0;
                    application.distribute( "temp_normal" );
                }   
        		application.distribute( "tempChanged", result ); 
        		application.distribute( "upload" ); 
            ]]></method>
        </behavior>
    </handler>
    <handler path="/get_lumi_Result">
    	<behavior>
    		<method id="onInvoke" params="handler, message"><![CDATA[
                //Receives result and passes to main container.
                var result = message.requestObject;  
                lumi_Info = result.toFixed(2);
        		application.distribute( "lumiChanged", result ); 	
                if(eval(result)<eval(lumi_exp)&&led_sts==0&&lumi_auto==1)
                {
                    application.distribute( "LedOn"); 
                    weibo_status="现在的光照强度是"+lumi_Info+"流明，光照强度过低，系统打开了补光灯为植物补光。@ioioioion @shen_wu";
                    if(open_message==1){                
                    	application.invoke(new Message("/weibo"));
                   	}
                } else if (eval(result)>eval(lumi_exp)+50&&lumi_auto==1&&led_sts==1){
                    application.distribute( "LedOff"); 
                    weibo_status="现在的光照强度是"+lumi_Info+"流明，光照强度充足，系统关闭了植物补光灯。@ioioioion @shen_wu";
                    if(open_message==1){                
                    	application.invoke(new Message("/weibo"));
                   	}
                }
            ]]></method>
        </behavior>
    </handler>
    <!-- MODEL -->
    <behavior id="Main_Bahavior"><![CDATA[
    function doConnect(url) {
        var conn = new WebSocket(url);
        var self = this;
        trace("start connection\n")
        
        conn.onopen = function() {
            trace("open\n");
            channel_init = 1;
        }
        conn.onmessage = function(e) {
            var message = JSON.parse(e.data);
            if(message.sort == "setting"){
            	temp_min = message.temp_min;
            	application.distribute( "mintempChanged");
            	temp_max = message.temp_max;
            	application.distribute( "maxtempChanged");
            	lumi_exp = message.lumi_exp;
            	application.distribute( "lumi_exp_Changed");
            	humi_exp = message.humi_exp;
            	application.distribute( "humi_exp_Changed");
            	lumi_auto = message.lumi_auto;
            	application.distribute( "lumi_autoChanged");
            	humi_auto = message.humi_auto;
            	application.distribute( "humi_autoChanged");
            }
        };

        conn.onclose = function(e) {
        };
        
        conn.onerror = function(e) {
        };
        return conn;
    }
    function initChannel(){
        this.conn = this.doConnect(channelurl);
    }
    function upload(){
        if(channel_init==1){
            var upload_data = new Object();
            upload_data.sort = "status"
            upload_data.temp_info = temp_Info;
            upload_data.lumi_info = lumi_Info;
            upload_data.humi_info = humi_Info;
            var upload_message = JSON.stringify(upload_data);
            this.conn.send(upload_message);
            if(open_message==0&&temp_Info!=0&&lumi_Info!=0&&access_token!=0){
            	open_message = 1;
                weibo_status="智能植物护理启动，现在的温度是"+temp_Info+"摄氏度，光照强度是"+lumi_Info+"流明，土壤水分为百分之"+humi_Info+"。@ioioioion @shen_wu";
                application.invoke(new Message("/weibo"));
            }
            
        }
    }
    function upload_setting(){
        if(channel_init==1){
            var upload_setting = new Object();
            upload_setting.sort = "setting";
            upload_setting.temp_min = temp_min;
            upload_setting.temp_max = temp_max;
            upload_setting.lumi_exp = lumi_exp;
            upload_setting.humi_exp = humi_exp;
            upload_setting.lumi_auto = lumi_auto;
            upload_setting.humi_auto = humi_auto;
            var setting_message = JSON.stringify(upload_setting);
            this.conn.send(setting_message);
        }
    }
        
    ]]></behavior>
    
    <behavior id="ButtonBehavior_temp">
        <method id="onCreate" params="label">
            label.coordinates = {top:1, bottom:0, left:1, right:1};
            label.skin = button_temp_Skin;
            label.style = labelStyle;
            label.active = true;
        </method>
        <method id="onTouchBegan" params="label">
        </method>
        <method id="onTouchEnded" params="label">
            label.skin = button_temp_Skin;
            this.onTap(label);
        </method>
        <method id="onTap" params="label">
             trace(label.string);
        </method>
    </behavior>
    
    <behavior id="ButtonBehavior_temp_num">
        <method id="onCreate" params="label">
            label.coordinates = {top:0, bottom:1, left:1, right:1};
            label.skin = button_temp_Skin;
            label.style = numStyle;
            label.active = true;
        </method>
        <method id="onTouchBegan" params="label">
        </method>
        <method id="onTouchEnded" params="label">
            label.skin = button_temp_Skin;
            this.onTap(label);
        </method>
        <method id="temp_abnormal" params="label">
            label.style = RednumStyle;
        </method>
        <method id="temp_normal" params="label">
            label.style = numStyle;
        </method>
        <method id="onTap" params="label">
             trace(label.string);
        </method>
        <method id="tempChanged" params="content,result"><![CDATA[
             content.string = result.toFixed(2) + " °C";
     ]]></method>
    </behavior>
    
    <behavior id="ButtonBehavior_humi">
        <method id="onCreate" params="label">
            label.coordinates = {top:1, bottom:0, left:1, right:1};
            label.skin = button_humi_Skin;
            label.style = labelStyle;
            label.active = true;
        </method>
        <method id="onTouchBegan" params="label">
        </method>
        <method id="onTouchEnded" params="label">
            label.skin = button_humi_Skin;
            this.onTap(label);
        </method>
        
        <method id="onTap" params="label">
             trace(label.string);
        </method>
    </behavior>
    <behavior id="ButtonBehavior_humi_num">
        <method id="onCreate" params="label">
            label.coordinates = {top:0, bottom:1, left:1, right:1};
            label.skin = button_humi_Skin;
            label.style = numStyle;
            label.active = true;
        </method>
        <method id="onTouchBegan" params="label">
        </method>
        <method id="onTouchEnded" params="label">
            label.skin = button_humi_Skin;
            this.onTap(label);
        </method>
        <method id="onTap" params="label">
             trace(label.string);
        </method>
        <method id="humi_Changed" params="content,result"><![CDATA[
            		//Converts voltage result to temperature. 
                    var temp = result;
                    content.string = temp.toFixed(2) + " %";
     ]]></method>
    </behavior>
    
    <behavior id="ButtonBehavior_lumi">
        <method id="onCreate" params="label">
            label.coordinates = {top:1, bottom:0, left:1, right:1};
            label.skin = button_lumi_Skin;
            label.style = labelStyle;
            label.active = true;
        </method>
        <method id="onTouchBegan" params="label">
        </method>
        <method id="onTouchEnded" params="label">
            label.skin = button_lumi_Skin;
            this.onTap(label);
        </method>
        <method id="onTap" params="label">
             trace(label.string);
        </method>
    </behavior>
    
    <behavior id="ButtonBehavior_lumi_num">
        <method id="onCreate" params="label">
            label.coordinates = {top:0, bottom:1, left:1, right:1};
            label.skin = button_lumi_Skin;
            label.style = numStyle;
            label.active = true;
        </method>
        <method id="onTouchBegan" params="label">
        </method>
        <method id="onTouchEnded" params="label">
            label.skin = button_lumi_Skin;
            this.onTap(label);
        </method>
        <method id="onTap" params="label">
             trace(label.string);
        </method>
        <method id="lumiChanged" params="content,result"><![CDATA[
                    content.string = result.toFixed(2) + " lx";
     ]]></method>
    </behavior>
    
    <behavior id="ButtonBehavior_maxtemp_setting">
        <method id="onCreate" params="label">
            label.coordinates = {top:0, bottom:1, left:1, right:1};
            label.skin = button_maxtemp_Skin;
            label.style = t_smalllabelStyle;
            label.active = true;
        </method>
        <method id="onTouchBegan" params="label">
        </method>
        <method id="onTouchEnded" params="label">
            label.skin = button_maxtemp_Skin;
            this.onTap(label);
        </method>
        <method id="onTap" params="label">
             trace(label.string);
        </method>
    </behavior>
    <behavior id="ButtonBehavior_mintemp_setting">
        <method id="onCreate" params="label">
            label.coordinates = {top:1, bottom:0, left:1, right:1};
            label.skin = button_maxtemp_Skin;
            label.style = b_smalllabelStyle;
            label.active = true;
        </method>
        <method id="onTouchBegan" params="label">
        </method>
        <method id="onTouchEnded" params="label">
            label.skin = button_maxtemp_Skin;
            this.onTap(label);
        </method>
        <method id="onTap" params="label">
             trace(label.string);
        </method>
    </behavior>
    <behavior id="ButtonBehavior_exp_humi_num_setting">
        <method id="onCreate" params="label">
            label.coordinates = {top:0, bottom:1, left:1, right:1};
            label.skin = button_humi_exp_Skin;
            label.style = t_smalllabelStyle;
            label.active = true;
        </method>
        <method id="onTouchBegan" params="label">
        </method>
        <method id="onTouchEnded" params="label">
            label.skin = button_humi_exp_Skin;
            this.onTap(label);
        </method>
        <method id="onTap" params="label">
             trace(label.string);
        </method>
    </behavior>
    <behavior id="ButtonBehavior_exp_humi_setting">
        <method id="onCreate" params="label">
            label.coordinates = {top:1, bottom:0, left:1, right:1};
            label.skin = button_humi_exp_Skin;
            label.style = b_smalllabelStyle;
            label.active = true;
        </method>
        <method id="onTouchBegan" params="label">
        </method>
        <method id="onTouchEnded" params="label">
            label.skin = button_humi_exp_Skin;
            this.onTap(label);
        </method>
        <method id="onTap" params="label">
             trace(label.string);
        </method>
    </behavior>
    <behavior id="ButtonBehavior_exp_lumi_num_setting">
        <method id="onCreate" params="label">
            label.coordinates = {top:0, bottom:1, left:1, right:1};
            label.skin = button_lumi_exp_Skin;
            label.style = t_smalllabelStyle;
            label.active = true;
        </method>
        <method id="onTouchBegan" params="label">
        </method>
        <method id="onTouchEnded" params="label">
            label.skin = button_lumi_exp_Skin;
            this.onTap(label);
        </method>
        <method id="onTap" params="label">
             trace(label.string);
        </method>
    </behavior>
    <behavior id="ButtonBehavior_exp_lumi_setting">
        <method id="onCreate" params="label">
            label.coordinates = {top:1, bottom:0, left:1, right:1};
            label.skin = button_lumi_exp_Skin;
            label.style = b_smalllabelStyle;
            label.active = true;
        </method>
        <method id="onTouchBegan" params="label">
        </method>
        <method id="onTouchEnded" params="label">
            label.skin = button_lumi_exp_Skin;
            this.onTap(label);
        </method>
        <method id="onTap" params="label">
             trace(label.string);
        </method>
    </behavior>
    
    <behavior id="ButtonBehavior_water">
        <method id="onCreate" params="label">
            label.coordinates = {top:1, bottom:1, left:1, right:1};
            label.skin = button_water_Skin;
            label.style = biglabelStyle;
            label.active = true;
        </method>
        <method id="onTouchBegan" params="label"><![CDATA[
            if((humi_auto==0)&&(water_sts==0)){
                label.skin = hiliteSkin;
                water_sts = 1;
                application.invoke( new MessageWithObject( "pins:/analogSensor/wateron" ));
            }
		]]></method>
        <method id="onTouchEnded" params="label">
            if(humi_auto==0){
                label.skin = button_water_Skin;
                water_sts = 0;
                application.invoke( new MessageWithObject( "pins:/analogSensor/wateroff" ));
            }
        </method>
        <method id="Auto_WaterOn" params="label">
            label.interval = 2000;
            label.start(); 
            water_sts = 1;
            application.invoke( new MessageWithObject( "pins:/analogSensor/wateron" ));
        </method>
		<method id="onTimeChanged" params="label"><![CDATA[
            if(water_sts == 1){
                if( (eval(humi_Info)>eval(humi_exp)) || (humi_auto==0) ){
                    application.invoke( new MessageWithObject( "pins:/analogSensor/wateroff" ));
                    water_sts = 0;
                    label.stop(); 
                    weibo_status="系统完成一次浇水，土壤湿度从百分之"+last_humi_Info+"上升到了百分之"+humi_Info+"。 @ioioioion @shen_wu";
                    if(open_message == 1){
                    	application.invoke(new Message("/weibo"));
                    }                     
                }
                else{
                    application.invoke( new MessageWithObject( "pins:/analogSensor/wateron" ));
                    water_sts = 2;
                }
            }
            else{
                application.invoke( new MessageWithObject( "pins:/analogSensor/wateroff" ));
                water_sts = 1;
            }
		]]></method>
        <method id="watergraySkinChanged" params="label">
            label.skin = graySkin;
        </method>
        <method id="waterSkinChanged" params="label">
            label.skin = button_water_Skin;
        </method>
    </behavior>
    
    
   <behavior id="ButtonBehavior_water_auto">
        <method id="onCreate" params="label">
            label.coordinates = {top:1, bottom:1, left:1, right:1};
            label.skin = button_water_auto_Skin;
            label.style = biglabelStyle;
            label.active = true;
            label.string = "Manual";
        </method>
        <method id="onTouchBegan" params="label">
            label.skin = hiliteSkin;
        </method>
        <method id="onTouchEnded" params="label">
            label.skin = button_water_auto_Skin;
            if(humi_auto==0){
            	humi_auto=1;
            	label.string = "Auto";
            	application.distribute( "watergraySkinChanged");
            }
            else{
           		humi_auto=0;
            	label.string = "Manual";
            	application.distribute( "waterSkinChanged");
            }
            application.distribute( "upload_setting");
        </method>
        <method id="humi_autoChanged" params="label"><![CDATA[
            if(humi_auto==1){
            	label.string= "Auto";
            	application.distribute( "watergraySkinChanged");
            }
            else{
                label.string= "Manual";
                application.distribute( "waterSkinChanged");
            }
    	]]></method>
    </behavior>
    
    <behavior id="ButtonBehavior_lumi_auto">
        <method id="onCreate" params="label">
            label.coordinates = {top:1, bottom:1, left:1, right:1};
            label.skin = button_lumi_auto_Skin;
            label.style = biglabelStyle;
            label.active = true;
            label.string = "Manual";
        </method>
        <method id="onTouchBegan" params="label">
            label.skin = hiliteSkin;
        </method>
        <method id="onTouchEnded" params="label">
            label.skin = button_lumi_auto_Skin;
            if(lumi_auto==0){
            	lumi_auto=1;
            	label.string = "Auto";
            	application.distribute( "ledgraySkinChanged");
            }
            else{
            	lumi_auto=0;
            	label.string = "Manual";
            	application.distribute( "ledSkinChanged");
            	if(led_sts == 1){
                	application.distribute( "LedOff");
                }
            }
            application.distribute( "upload_setting");
        </method>
        <method id="lumi_autoChanged" params="label"><![CDATA[
            if(lumi_auto==1){
                label.string= "Auto";
                application.distribute( "ledgraySkinChanged");
            }
            else{
                label.string= "Manual";
                application.distribute( "ledSkinChanged");
                if(led_sts == 1){
                	application.distribute( "LedOff");
                }
            }
        ]]></method>
    </behavior>
    
    <behavior id="ButtonBehavior_light">
        <method id="onCreate" params="label">
            label.coordinates = {top:1, bottom:1, left:1, right:1};
            if(lumi_auto==0)
                label.skin = button_light_Skin;
            else
                label.skin = graySkin;
            label.style = inactiveStyle;
            label.active = true;
        </method>
        <method id="onTouchBegan" params="label">
            if(lumi_auto==0)
                label.skin = hiliteSkin;
            else
                label.skin = graySkin;
        </method>
        <method id="onTouchEnded" params="label">
            if(lumi_auto==0){
                label.skin = button_light_Skin;
                if(led_sts==0){
                    led_sts=1;
                    this.LedOn(label);
                }
                else{
                    led_sts=0;
                    this.LedOff(label);
                }
            }
        </method>
        <method id="LedOn" params="label">
            label.style = biglabelStyle;
            led_sts = 1;
            application.invoke( new MessageWithObject( "pins:/analogSensor/ledon"  ) );
        </method>
        <method id="LedOff" params="label">
            label.style = inactiveStyle;
            led_sts = 0;
            application.invoke( new MessageWithObject( "pins:/analogSensor/ledoff"  ) );
            
        </method>
        <method id="ledgraySkinChanged" params="label">
            label.skin =graySkin;
        </method>
        <method id="ledSkinChanged" params="label">
            label.skin =button_light_Skin;
        </method>
    </behavior>

<container id="MainScreen" top="0" left="0" bottom="0" right="0" skin="backgroundSkin">
    <behavior like="Main_Bahavior">
    </behavior>
    <column width="320">
        <line left="0" right="0" height="80">
            <column top="0" left="0" bottom="0" right="0">
                <label string="'Temperature'">
                    <behavior like="ButtonBehavior_temp">
           
                    </behavior>
                </label>
                <label string="'0 °C'">
                    <behavior like="ButtonBehavior_temp_num">
                       
                    </behavior>
                </label>
            </column>
            <column top="0" left="0" bottom="0" right="0">
                <label string="'Soil Humidity'">
                    <behavior like="ButtonBehavior_humi">

                    </behavior>
                </label>
                <label string="'0 %'">
                    <behavior like="ButtonBehavior_humi_num">

                    </behavior>
                </label>
            </column>
            <column top="0" left="0" bottom="0" right="0">
                <label string="'Luminance'">
                    <behavior like="ButtonBehavior_lumi">

                    </behavior>
                </label>
                <label string="'0 lx'">
                    <behavior like="ButtonBehavior_lumi_num">

                    </behavior>
                </label>
            </column>
        </line>
        <line left="0" right="0" height="80">
            <column top="0" left="0" bottom="0" right="0">
                <label string="'Min:10 °C'">
                    <behavior like="ButtonBehavior_mintemp_setting">
                        <method id="onTap" params="label">label.invoke(new Message("/temp_setting"));</method>
                        <method id="mintempChanged" params="label"><![CDATA[
                   			 label.string= "Min:" + temp_min + " °C";
    					 ]]></method>
                    </behavior>
                </label>
                <label string="'Max:30 °C'">
                    <behavior like="ButtonBehavior_maxtemp_setting">
                        <method id="onTap" params="label">label.invoke(new Message("/temp_setting"));</method>
                        <method id="maxtempChanged" params="label"><![CDATA[
                   			 label.string= "Max:" + temp_max + " °C";
    					 ]]></method>
                    </behavior>
                </label>
            </column>
            <column top="0" left="0" bottom="0" right="0">
                <label string="'Expected:'">
                    <behavior like="ButtonBehavior_exp_humi_setting">
                        <method id="onTap" params="label">label.invoke(new Message("/water_setting"));</method>
                    </behavior>
                </label>
                <label string="'0 %'">
                    <behavior like="ButtonBehavior_exp_humi_num_setting">
                        <method id="onTap" params="label">label.invoke(new Message("/water_setting"));</method>
                        <method id="humi_exp_Changed" params="label"><![CDATA[
                   			 label.string= humi_exp + " %";
    					 ]]></method>
                    </behavior>
                </label>
            </column>
            <column top="0" left="0" bottom="0" right="0">
                <label string="'Expected:'">
                    <behavior like="ButtonBehavior_exp_lumi_setting">
                        <method id="onTap" params="label">label.invoke(new Message("/light_setting"));</method>
                    </behavior>
                </label>
                <label string="'0 lx'">
                    <behavior like="ButtonBehavior_exp_lumi_num_setting">
                        <method id="onTap" params="label">label.invoke(new Message("/light_setting"));</method>
                        <method id="lumi_exp_Changed" params="label"><![CDATA[
                   			 label.string= lumi_exp + " lx";
    					 ]]></method>
                    </behavior>
                </label>
            </column>
        </line>
        <line left="0" right="0" height="60">
            <behavior>
                <method id="onCreate" params="line">
//                    line.skin = hiliteSkin;
                </method>
            </behavior>
            <label string="'Water'">
                <behavior like="ButtonBehavior_water">
                </behavior>
            </label>
            <label string="'Auto'">
                <behavior like="ButtonBehavior_water_auto">
                </behavior>
            </label>
            <label string="'Light'">
                <behavior like="ButtonBehavior_light">
                </behavior>
            </label>
            <label string="'Auto'">
                <behavior like="ButtonBehavior_lumi_auto">
                </behavior>
            </label>
        </line>
    </column>
</container>

    <script><![CDATA[
    application.invoke(new Message("/getToken"));
    application.invoke(new Message("/getUrl"));
    application.invoke( new MessageWithObject( "pins:configure", {
        	analogSensor: {
                require: "flower",
                pins: {
                    wetSensor: { pin: 58 },
                    i2cTemp: { sda: 55, clock: 56 },  
                    i2cLumin: { sda: 60, clock: 61 },  
                    watering:  { pin: 4 },
                    led: { pin: 6 }            
                }
            }
        } ) );
    application.invoke( new MessageWithObject( "pins:/analogSensor/wetread?" + 
            serializeQuery( {       
				repeat: "on",
				interval: 1000,
				callback: "/get_humi_Result"
        } ) ) );	
    application.invoke( new MessageWithObject( "pins:/analogSensor/tempread?" + 
            serializeQuery( {       
				repeat: "on",
				interval: 1000,
				callback: "/get_temp_Result"
        } ) ) );
    application.invoke( new MessageWithObject( "pins:/analogSensor/lightread?" + 
            serializeQuery( {       
				repeat: "on",
				interval: 1000,
				callback: "/get_lumi_Result"
        } ) ) );
    application.behavior = new MODEL.ApplicationBehavior( application );

    application.add( new MainScreen() );

    ]]></script>
    <handler path="/temp_setting">
        <behavior like="MODEL.DialogBehavior">
            <method id="onDescribe" params="query">
                return {
                    Dialog: DIALOG.Box,
                    title: "Temperature Setting",
                    items: [
                        {
                            Item: DIALOG.Slider,
                            id: "temp_min",
                            label: "Set Min Temperature",
                            min: 0,
                            max: 50,
                            value: temp_min,
                            toString: function(val) { return Math.floor(val); }, 
                            
                        },
                        {
                            Item: DIALOG.Slider,
                            id: "temp_max",
                            label: "Set Max Temperature",
                            min: 0,
                            max: 50,
                            value: temp_max,
                            toString: function(val) { return Math.floor(val); }, 
                        }
                    ],
                    ok: "Comfirm",
                    cancel: "Close",
                    action: "/temp_set",
                };
            </method>
        </behavior>
    </handler>
    <handler path="/water_setting">
        <behavior like="MODEL.DialogBehavior">
            <method id="onDescribe" params="query">
                return {
                    Dialog: DIALOG.Box,
                    title: "Setting",
                    items: [
                        {
                            Item: DIALOG.Slider,
                            id: "humi_exp",
                            label: "Set Soil Humidity",
                            min: 0,
                            max: 100,
                            value: humi_exp,
                            toString: function(val) { return Math.floor(val); }, 
                        }
                    ],
                    ok: "Comfirm",
                    cancel: "Close",
                    action: "/water_set",
                };
            </method>
        </behavior>
    </handler>

    <handler path="/light_setting">
        <behavior like="MODEL.DialogBehavior">
             <method id="onDescribe" params="query">
                return {
                    Dialog: DIALOG.Box,
                    title: "Setting",
                    items: [
                        {
                            Item: DIALOG.Slider,
                            id: "lumi_exp",
                            label: "Set Luminance",
                            min: 0,
                            max: 10000,
                            value: lumi_exp,
                            toString: function(val) { return Math.floor(val); }, 
                        }
                    ],
                    ok: "Comfirm",
                    cancel: "Close",
                    action: "/light_set",
                };
            </method>
        </behavior>
    </handler> 


    <handler path="/temp_set">
        <behavior like="MODEL.CommandBehavior">
            <method id="onQuery" params="handler, query">
                for (var key in query) {
                    if(key == "temp_min")
                        temp_min = eval(query[key]).toFixed(0);
                    else 
                        temp_max = eval(query[key]).toFixed(0);
                    trace(key + ": " + query[key] + "\n");
                }
                if(temp_max-temp_min>1){
                	application.distribute( "maxtempChanged", temp_max );
                	application.distribute( "mintempChanged", temp_min );
                	application.distribute("upload_setting");
                }
                else{
                    handler.invoke(new Message("/error_setting"));
                }
            </method>
        </behavior>
    </handler>
    <handler path="/error_setting">
        <behavior like="MODEL.DialogBehavior">
             <method id="onDescribe" params="query">
                return {
                    Dialog: DIALOG.Box,
                    title: "Error",
                    items: [
                        {
                            Item: DIALOG.Caption,
                            string: "Inappropriate Temperature Setting",
                        },
                    ],
                    ok: "OK",
                };
            </method>
        </behavior>
    </handler>    
    <handler path="/water_set">
        <behavior like="MODEL.CommandBehavior">
            <method id="onQuery" params="handler, query">
                for (var key in query) {
                        humi_exp = eval(query[key]).toFixed(0);
                    
                    trace(key + ": " + query[key] + "\n");
                }
                application.distribute( "humi_exp_Changed", humi_exp );
                application.distribute("upload_setting");
            </method>
        </behavior>
    </handler>
    <handler path="/light_set">
        <behavior like="MODEL.CommandBehavior">
            <method id="onQuery" params="handler, query">
                for (var key in query) {
                        lumi_exp = eval(query[key]).toFixed(0);
                    trace(key + ": " + query[key] + "\n");
                    
                }
                application.distribute( "lumi_exp_Changed", lumi_exp );
                application.distribute("upload_setting");
            </method>
        </behavior>
    </handler>
</program>
